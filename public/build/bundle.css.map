{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Actions.svelte",
    "../../App.svelte",
    "../../Praise.svelte",
    "../../Settings.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onDestroy } from 'svelte';\n\n  import { tratakaState } from './stores';\n  import Play from './icons/Play.svelte';\n  import Pause from './icons/Pause.svelte';\n  import Reset from './icons/Reset.svelte';\n\n  let inactive = false;\n  let started = false;\n  let finished = false;\n  let paused = false;\n\n  const unsubscribe = tratakaState.subscribe((state) => {\n    switch (state) {\n      case tratakaState.inactive:\n        inactive = true;\n        started = false;\n        finished = false;\n        paused = false;\n        break;\n      case tratakaState.started:\n        started = true;\n        inactive = false;\n        finished = false;\n        paused = false;\n        break;\n      case tratakaState.finished:\n        finished = true;\n        inactive = false;\n        started = false;\n        paused = false;\n        break;\n      case tratakaState.paused:\n        paused = true;\n        started = false;\n        finished = false;\n        inactive = false;\n        break;\n      default:\n        break;\n    }\n  });\n\n  onDestroy(unsubscribe);\n\n  export let start = () => {};\n  export let reset = () => {};\n  export let pause = () => {};\n\n  const startButtonName = 'Старт';\n  const resetButtonName = 'Сброс';\n  const pauseButtonName = 'Пауза';\n</script>\n\n<style>\n  .actions {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n  }\n\n  .action-button {\n    padding: 0;\n    border: none;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: inherit;\n  }\n  \n  .action-button:last-child {\n    margin-right: 0;\n  }\n</style>\n\n<div class=\"actions\">\n  {#if paused || finished}\n    <button\n      class=\"action-button\"\n      type=\"button\"\n      on:click={reset}\n      title={resetButtonName}>\n      <span class=\"icon-wrapper\">\n        <Reset />\n      </span>\n    </button>\n  {/if}\n  {#if started}\n    <button\n      class=\"action-button\"\n      type=\"button\"\n      on:click={pause}\n      title={pauseButtonName}>\n      <span class=\"icon-wrapper\">\n        <Pause />\n      </span>\n    </button>\n  {/if}\n  {#if inactive || paused}\n    <button\n      class=\"action-button\"\n      type=\"button\"\n      on:click={start}\n      title={startButtonName}>\n      <span class=\"icon-wrapper\">\n        <Play />\n      </span>\n    </button>\n  {/if}\n</div>\n",
    "<script>\n  import { onDestroy } from 'svelte';\n\n  import { tratakaState } from './stores';\n  import Praise from './Praise.svelte';\n  import Settings from './Settings.svelte';\n  import Actions from './Actions.svelte';\n\n  const HARE = 'Харе';\n  const KRISHNA = 'Кришна';\n  const RAMA = 'Рама';\n\n  const mahaMantra = [\n    HARE,\n    KRISHNA,\n    HARE,\n    KRISHNA,\n    KRISHNA,\n    KRISHNA,\n    HARE,\n    HARE,\n    HARE,\n    RAMA,\n    HARE,\n    RAMA,\n    RAMA,\n    RAMA,\n    HARE,\n    HARE,\n  ];\n\n  const MANTRAS_IN_ROUND = 108;\n  const SECONDS_IN_MINUTE = 60;\n  const WORDS_IN_MANTRA = 16;\n  const LETTERS_IN_MANTRA = mahaMantra.reduce(\n    (acc, word) => acc + word.length,\n    0,\n  );\n\n  let letterCounter = 0;\n  let wordCounter = 0;\n  let mantraCounter = 0;\n  let roundCounter = 0;\n\n  let rounds = 1;\n  let minutesForRound = 10;\n\n  function handleCounters() {\n    const wordEnd = letterCounter === mahaMantra[wordCounter].length;\n    if (wordEnd) {\n      letterCounter = 0;\n      wordCounter += 1;\n    }\n    const mantraEnd = wordCounter === WORDS_IN_MANTRA;\n    if (mantraEnd) {\n      hideMantra();\n      wordCounter = 0;\n      mantraCounter += 1;\n    }\n    const roundEnd = mantraCounter === MANTRAS_IN_ROUND;\n    if (roundEnd) {\n      mantraCounter = 0;\n      roundCounter += 1;\n    }\n\n    if (roundCounter && roundCounter === rounds) {\n      finish();\n    }\n  }\n\n  $: handleCounters(letterCounter, wordCounter, mantraCounter, roundCounter);\n\n  function hideWord(ind) {\n    const wordElement = document.querySelector(`#hn-${ind}`);\n    wordElement.classList.add('hidden');\n  }\n\n  function showWord(ind) {\n    const wordElement = document.querySelector(`#hn-${ind}`);\n    wordElement.classList.remove('hidden');\n  }\n\n  function hideMantra() {\n    mahaMantra.forEach((_, ind) => hideWord(ind));\n  }\n\n  function showMantra() {\n    mahaMantra.forEach((_, ind) => showWord(ind));\n  }\n\n  let inactive = false;\n  // let started = false;\n  let finished = false;\n  let paused = false;\n\n  const unsubscribe = tratakaState.subscribe((state) => {\n    switch (state) {\n      case tratakaState.inactive:\n        inactive = true;\n        // started = false;\n        finished = false;\n        paused = false;\n        break;\n      case tratakaState.started:\n        // started = true;\n        inactive = false;\n        finished = false;\n        paused = false;\n        break;\n      case tratakaState.finished:\n        finished = true;\n        inactive = false;\n        // started = false;\n        paused = false;\n        break;\n      case tratakaState.paused:\n        paused = true;\n        // started = false;\n        finished = false;\n        inactive = false;\n        break;\n      default:\n        break;\n    }\n  });\n\n  function handleLetterTick() {\n    if (letterCounter === 0) {\n      showWord(wordCounter);\n    }\n    letterCounter += 1;\n  }\n\n  let mainIntervalId;\n  function start() {\n    if (inactive) {\n      hideMantra();\n    }\n\n    tratakaState.start();\n\n    const secondsForRound = minutesForRound * SECONDS_IN_MINUTE;\n    const secondsForMantra = secondsForRound / MANTRAS_IN_ROUND;\n    // const secondsForWord = secondsForMantra / WORDS_IN_MANTRA;\n    const secondForLetter = secondsForMantra / LETTERS_IN_MANTRA;\n    // const msForWord = secondsForWord * 1000;\n    const msForLetter = secondForLetter * 1000;\n\n    mainIntervalId = setInterval(handleLetterTick, msForLetter);\n  }\n\n  function finish() {\n    tratakaState.finish();\n    clearInterval(mainIntervalId);\n    mainIntervalId = null;\n  }\n\n  function pause() {\n    tratakaState.pause();\n    clearInterval(mainIntervalId);\n    mainIntervalId = null;\n  }\n\n  function reset() {\n    if (paused) {\n      showMantra();\n    }\n    tratakaState.reset();\n    clearInterval(mainIntervalId);\n    mainIntervalId = null;\n\n    letterCounter = 0;\n    wordCounter = 0;\n    mantraCounter = 0;\n    roundCounter = 0;\n  }\n\n  onDestroy(() => {\n    reset();\n    unsubscribe();\n  });\n\n  const rowLength = 2;\n  function isRowEnd(wordInd) {\n    const wordNum = wordInd + 1;\n    return wordNum % rowLength === 0;\n  }\n\n  const roundsLabel = 'Круги';\n  const mantrasLabel = 'Мантры';\n  // let wordsLabel = \"Слова\";\n</script>\n\n<style>\n  .main {\n    padding: 8px 0;\n    height: 540px;\n    max-width: 400px;\n    margin: auto;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n  }\n\n  .counters {\n    display: flex;\n    justify-content: flex-end;\n    margin-right: 8px;\n  }\n\n  .counter {\n    font-family: 'Courier New', Courier, monospace;\n    font-size: 14px;\n    margin-right: 10px;\n    color: var(--secondary-text);\n  }\n\n  .counter:last-child {\n    margin-right: 0;\n  }\n\n  .mantra-box {\n    display: flex;\n    justify-content: center;\n    text-align: center;\n    flex: 1;\n    width: 100%;\n    height: 100%;\n    margin: 40px 0;\n  }\n\n  .mantra-card {\n    font-size: 2em;\n    font-weight: 500;\n  }\n\n  .holy-name {\n    transition: opacity 0.1s cubic-bezier(0.645, 0.045, 0.355, 1);\n  }\n</style>\n\n<main class=\"main\">\n  {#if !inactive}\n    <div class=\"counters\">\n      <div class=\"counter\">\n        {roundsLabel}:\n        <span class=\"counter-number\">{roundCounter}</span>\n      </div>\n      <div class=\"counter\">\n        {mantrasLabel}:\n        <span class=\"counter-number\">{mantraCounter}</span>\n      </div>\n      <!-- <div class=\"counter\">{wordsLabel}: <span class=\"counter-number\">{wordCounter}</span></div> -->\n    </div>\n  {/if}\n\n  <section class=\"mantra-box\">\n    {#if finished}\n      <Praise />\n    {:else}\n      <div class=\"mantra-card\">\n        {#each mahaMantra as word, i (i)}\n          <span id={`hn-${i}`} class=\"holy-name\">{word}</span>\n          {#if isRowEnd(i)}\n            <br />\n          {/if}\n        {/each}\n      </div>\n    {/if}\n  </section>\n\n  {#if paused || inactive}\n    <Settings bind:rounds bind:minutesForRound />\n  {/if}\n\n  <Actions {start} {reset} {pause} />\n</main>\n",
    "<script>\n  import praiseImg1 from './images/praise/1.png';\n  import praiseImg2 from './images/praise/2.png';\n  import praiseImg3 from './images/praise/3.png';\n  import praiseImg4 from './images/praise/4.png';\n  import praiseImg5 from './images/praise/5.png';\n  import praiseImg6 from './images/praise/6.png';\n  import praiseImg7 from './images/praise/7.png';\n  import praiseImg8 from './images/praise/8.png';\n  import praiseImg9 from './images/praise/9.png';\n  import praiseImg10 from './images/praise/10.png';\n  import praiseImg11 from './images/praise/11.png';\n  import praiseImg12 from './images/praise/12.png';\n\n  function getRandomInt(min, max) {\n    const ceiledMin = Math.ceil(min);\n    const flooredMax = Math.floor(max);\n\n    // The maximum is exclusive and the minimum is inclusive\n    return Math.floor(Math.random() * (flooredMax - ceiledMin)) + ceiledMin;\n  }\n  const praiseImageList = [\n    praiseImg1,\n    praiseImg2,\n    praiseImg3,\n    praiseImg4,\n    praiseImg5,\n    praiseImg6,\n    praiseImg7,\n    praiseImg8,\n    praiseImg9,\n    praiseImg10,\n    praiseImg11,\n    praiseImg12,\n  ];\n  const praiseImg = praiseImageList[getRandomInt(0, praiseImageList.length)];\n</script>\n\n<style>\n  .praise-box {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .praise-image {\n    margin-top: 1em;\n  }\n</style>\n\n<div class=\"praise-box\">\n  <span class=\"praise-text\">Ура! Все круги прочитаны!</span>\n  <img\n    class=\"praise-image\"\n    src={praiseImg}\n    alt=\"Вы молодец!\"\n    width=\"300\"\n    height=\"300\" />\n</div>\n",
    "<script>\n  import Timer from './icons/Timer.svelte';\n\n  export let rounds;\n  export let minutesForRound;\n\n  const roundsInputLabel = 'Кругов';\n  const timeForRoundInputLabel = 'Время круга';\n  const minutes = 'минут';\n</script>\n\n<style>\n  .settings {\n    margin-bottom: 24px;\n  }\n\n  .settings-form {\n    width: 100%;\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n  }\n\n  .setting-field {\n    display: flex;\n    align-items: center;\n  }\n\n  .numeric-input {\n    margin: 0 6px;\n    min-width: 40px;\n    max-width: 50px;\n    border: none;\n    border-radius: 0;\n    border-bottom: 1px solid #000000;\n    text-align: center;\n    background-color: inherit;\n    font-weight: 500;\n    font-size: 1.1em;\n  }\n</style>\n\n<div class=\"settings\">\n  <form class=\"settings-form\">\n    <label class=\"setting-field\" for=\"rounds\">\n      {roundsInputLabel}:\n      <input\n        class=\"numeric-input\"\n        id=\"rounds\"\n        type=\"number\"\n        inputmode=\"numeric\"\n        pattern=\"[0-9]*\"\n        bind:value={rounds}\n        min=\"1\" />\n    </label>\n    <label class=\"setting-field\" for=\"timeForRound\">\n      <span class=\"icon-wrapper\" title={timeForRoundInputLabel}>\n        <Timer width=\"30px\" height=\"30px\" />\n      </span>\n      :\n      <input\n        class=\"numeric-input\"\n        id=\"timeForRound\"\n        type=\"number\"\n        inputmode=\"numeric\"\n        pattern=\"[0-9]*\"\n        bind:value={minutesForRound}\n        min=\"1\" />\n      {minutes}\n    </label>\n  </form>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAwDE,QAAQ,eAAC,CAAC,AACR,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,AACzB,CAAC,AAED,cAAc,eAAC,CAAC,AACd,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,gBAAgB,CAAE,OAAO,AAC3B,CAAC,AAED,6BAAc,WAAW,AAAC,CAAC,AACzB,YAAY,CAAE,CAAC,AACjB,CAAC;ACyHD,KAAK,eAAC,CAAC,AACL,OAAO,CAAE,GAAG,CAAC,CAAC,CACd,MAAM,CAAE,KAAK,CACb,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,eAAe,CAAE,aAAa,AAChC,CAAC,AAED,SAAS,eAAC,CAAC,AACT,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,QAAQ,CACzB,YAAY,CAAE,GAAG,AACnB,CAAC,AAED,QAAQ,eAAC,CAAC,AACR,WAAW,CAAE,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,CAC9C,SAAS,CAAE,IAAI,CACf,YAAY,CAAE,IAAI,CAClB,KAAK,CAAE,IAAI,gBAAgB,CAAC,AAC9B,CAAC,AAED,uBAAQ,WAAW,AAAC,CAAC,AACnB,YAAY,CAAE,CAAC,AACjB,CAAC,AAED,WAAW,eAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,UAAU,CAAE,MAAM,CAClB,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,IAAI,CAAC,CAAC,AAChB,CAAC,AAED,YAAY,eAAC,CAAC,AACZ,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AAClB,CAAC,AAED,UAAU,eAAC,CAAC,AACV,UAAU,CAAE,OAAO,CAAC,IAAI,CAAC,aAAa,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,AAC/D,CAAC;ACvMD,WAAW,eAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,AACrB,CAAC,AAED,aAAa,eAAC,CAAC,AACb,UAAU,CAAE,GAAG,AACjB,CAAC;ACnCD,SAAS,cAAC,CAAC,AACT,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,cAAc,cAAC,CAAC,AACd,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,YAAY,CAC7B,WAAW,CAAE,MAAM,AACrB,CAAC,AAED,cAAc,cAAC,CAAC,AACd,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,AACrB,CAAC,AAED,cAAc,cAAC,CAAC,AACd,MAAM,CAAE,CAAC,CAAC,GAAG,CACb,SAAS,CAAE,IAAI,CACf,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,CAAC,CAChB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAChC,UAAU,CAAE,MAAM,CAClB,gBAAgB,CAAE,OAAO,CACzB,WAAW,CAAE,GAAG,CAChB,SAAS,CAAE,KAAK,AAClB,CAAC"
}